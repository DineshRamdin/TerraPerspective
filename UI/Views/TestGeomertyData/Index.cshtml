@{
    ViewData["Title"] = "Test Geomerty Data";
}

<link href="~/plugins/leaflet-1.7.1/leaflet.css" rel="stylesheet" />
<link href="~/plugins/leaflet-draw-1.0.4/leaflet.draw.css" rel="stylesheet" />
<style>
    #map {
        width: 100%;
        height: 85vh; /* Full viewport height */
    }

    .custom-button {
        background: white;
        padding: 5px 10px;
        border: 2px solid #ccc;
        cursor: pointer;
        font-size: 14px;
    }

        .custom-button:hover {
            background: #eee;
        }

    #GeomertyDataTable > tbody > .selected-row {
        background: #cce5ff;
        border-color: #cce5ff;
    }
</style>

<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Test Geomerty Data</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a asp-area="" asp-controller="Dashboard" asp-action="index">Home</a></li>
                    <li class="breadcrumb-item active">Test Geomerty Data</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->


<section class="content">
    <div class="container-fluid">
        <div class="card card-solid">
            <div class="card-body pb-0">
                <div class="row">
                    <div class="col-10">
                    </div>
                    <div class="col-2">
                        <button type="button" class="btn btn-block btn-primary mb-3" onclick="openGeomertyDataModal(0)">Add</button>
                    </div>
                </div>
                <div class="row">
                    @*  <div class="col-2 mb-10">
                    <div id="Zonejstree"></div>
                    </div> *@
                    <div class="col-6  mb-10">
                        <table id="GeomertyDataTable" class="table table-bordered table-striped"></table>
                    </div>

                    <div class="col-6  mb-10">
                        <div id="map"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="modal fade" id="AddGeomertyDataModal" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <partial name="_AddGeomertyData.cshtml" />
</div>

@section scripts
{

    <script src="~/plugins/leaflet-1.7.1/leaflet.js"></script>
    <script src="~/plugins/leaflet-draw-1.0.4/leaflet.draw.js"></script>
    <script>

        var GetAllTestGeomertyDataUrl = '@Url.Action("GetAll", "TestGeomertyData")';
        var GetSelectedZoneGeomertyDataUrl = '@Url.Action("GetSelectedZoneGeomertyData", "TestGeomertyData")';
        var GetAllZoneUrl = '@Url.Action("GetAllZone", "TestGeomertyData")';
        var CreateUpdateGeomertyDataUrl = '@Url.Action("CreateUpdate", "TestGeomertyData")';
        var GeomertyDataGetByIdUrl = '@Url.Action("GetById", "TestGeomertyData")';

        $(function () {
            $('.nav-link').removeClass('active');
            $('#liTestGeomertyDatamenu').addClass('active');

            // BindJsTreeData();
            initMap();
            GetAllGeomertyData();
            // $('#Zonejstree').on('changed.jstree', function (e, data) {
            //     if (data.action != 'ready') { // Ensures it was triggered by node selection Or deselection
            //         initMap();
            //     }
            // });

            $("#GeomertyDataTable").on('click', 'tr', function () {
                $("#GeomertyDataTable").find(".selected-row").removeClass("selected-row");
                var Id = $(this).attr("data-id")
                $(this).addClass("selected-row")
                initMap(Id);
            });

        });
        function GetAllGeomertyData() {
            var columnList = [
                { data: 'id', title: 'Id', visible: false },
                { data: 'zone', title: 'Zone' },
                { data: 'type', title: 'Type' },
            ];

            initializeDataGrid('GeomertyDataTable', 'openGeomertyDataModal', GetAllZoneUrl, columnList, false, false, true, false);

        }
        function BindJsTreeData() {
            var ZoneData = [];
            $.ajax({
                url: GetAllZoneUrl,
                type: "POST",
                async: false,
                // data: dataObject,  // Send data if needed
                beforeSend: function () {
                    ZoneData = [];
                },
                success: function (response) {
                    if (response.data) {
                        ZoneData = response.data;
                    }
                },
                error: function (error) {
                    console.log("Error:", error);
                    toastr.error("Error:" + error);
                }
            }).done(function () {
                const groupedData = ZoneData.reduce((acc, item) => {
                    const Type = item.type;
                    if (!acc[Type]) {
                        acc[Type] = { text: Type, children: [] };
                    }
                    acc[Type].children.push({ text: item.zone, Value: item.id });
                    return acc;
                }, {});

                const selectArray = Object.values(groupedData);

                if ($.jstree.reference('#Zonejstree')) {
                    $('#Zonejstree').jstree("destroy").empty(); // Destroy and clear DOM content
                }

                $('#Zonejstree').on('loaded.jstree', function (e, data) {
                    $('#Zonejstree').jstree('select_all'); // Select all nodes once the tree is fully loaded
                }).jstree({
                    'core': {
                        'data': selectArray
                    },
                    "plugins": ["checkbox"] // Enable the checkbox plugin
                });
            });
        }
        function GetSelectedZone() {
            var selectedNodes = $('#Zonejstree').jstree("get_selected", true); // Get selected nodes with full data
            var values = [];

            selectedNodes.forEach(function (node) {
                if (node.original.Value !== undefined) { // Check if Value exists
                    values.push(node.original.Value); // Push the Value to the array
                }
            });
            return values.join(",");
        }

        let map;

        function initMap(selectedZone) {
            var MapData = [];
            // var selectedZone = GetSelectedZone();

            var dataObject = {};
            dataObject.selectedZone = selectedZone == undefined ? "" : selectedZone;

            $.ajax({
                url: selectedZone == undefined ? GetAllTestGeomertyDataUrl : GetSelectedZoneGeomertyDataUrl,
                type: "POST",
                data: dataObject,  // Send data if needed
                beforeSend: function () {
                    MapData = [];
                },
                success: function (response) {
                    if (response.data) {
                        MapData = response.data;
                    }
                },
                error: function (error) {
                    console.log("Error:", error);
                    toastr.error("Error:" + error);
                }
            }).done(function () {

                if (map) {
                    map.eachLayer(function (layer) {
                        if (!layer._url) {
                            map.removeLayer(layer); // Remove all layers except the tile layer
                        }
                    });
                }
                else {

                    map = L.map('map').setView([-20.081670, 57.598266], 10);

                    const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        maxZoom: 19,
                        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
                    }).addTo(map);

                    // Base layer: OpenStreetMap
                    var osmLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        maxZoom: 19,
                        attribution: '© OpenStreetMap'
                    }).addTo(map);

                    // Satellite layer (ESRI Satellite)
                    var satelliteLayer = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
                        attribution: '© Esri, Maxar, Earthstar Geographics, and the GIS User Community'
                    });

                    // Define base maps for the dropdown
                    var baseMaps = {
                        "Map": osmLayer,
                        "Satellite": satelliteLayer
                    };

                    L.control.layers(baseMaps).addTo(map);
                    // Add the custom control to the map

                }

                var bounds = L.latLngBounds(); 

                // Loop through the data array and process each feature
                MapData.forEach(function (item) {
                    // Parse the GeoJSON string
                    var geoJsonData = JSON.parse(item.featureGeoJson);

                    // Add the GeoJSON polygon to the map
                    var layer = L.geoJSON(geoJsonData).addTo(map);

                    bounds.extend(layer.getBounds());
                });

                // Fit the map to the accumulated bounds
                if (bounds.isValid()) {
                    map.fitBounds(bounds, {
                        padding: [50, 50],  // Adds padding around the bounds
                        maxZoom: 12,        // Sets a maximum zoom level
                        animate: true       // Animates the zoom transition
                    });
                }
            });

        }

        let Createmap;
        function openGeomertyDataModal(id) {
            var dataObject = {};
            dataObject.id = id;
            var existingGeoJson = "";
            $.ajax({
                url: GeomertyDataGetByIdUrl,
                type: "POST",
                data: dataObject,  // Send data if needed
                beforeSend: function () {
                    ClearGeomertyDataModal();
                },
                success: function (response) {
                    if (response.data) {
                        console.log("response.data", response.data);
                        if (response.data.id > 0)
                            $("#h4GeomertyDataTitle").html("Modify Geomerty Data");
                        else {
                            $("#h4GeomertyDataTitle").html("Add Geomerty Data");
                        }

                        $("#hdnId").val(response.data.id);
                        $("#txtZone").val(response.data.zone);
                        $("#txtType").val(response.data.type);


                        if (response.data.featureGeoJson != null) {
                            existingGeoJson = JSON.parse(response.data.featureGeoJson)
                            $('#hdnMapdata').val(ConvertGeoJSONtoWKT(response.data.featureGeoJson));
                        }
                    }
                    else {
                        toastr.error(response.errorMessage);
                    }
                    // Handle success (e.g., update UI with response data)
                },
                error: function (error) {
                    console.log("Error:", error);
                    toastr.error("Error:" + error);
                }
            }).done(function () {

                $('#AddGeomertyDataModal').modal('show');
                $("#frnGeomertyDataCreate").validate({}).resetForm();

                if (Createmap) {
                    Createmap.remove(); // Destroy the existing map instance if it exists
                    Createmap = null;    // Set it to null to ensure a clean start
                }

                // Createmap = L.map('Createmap').setView([51.505, -0.09], 13);
                Createmap = L.map('Createmap').setView([-20.081670, 57.598266], 12);

                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19
                }).addTo(Createmap);


                // Add drawing control
                var drawnItems = new L.FeatureGroup();
                Createmap.addLayer(drawnItems);

                var drawControl = new L.Control.Draw({
                    edit: {
                        featureGroup: drawnItems,
                        remove: true
                    },
                    draw: {
                        polygon: true,
                        polyline: false,
                        rectangle: false,
                        circle: false,
                        marker: false,
                        circlemarker: false
                    }
                });
                Createmap.addControl(drawControl);

                if (existingGeoJson) {
                    L.geoJSON(existingGeoJson).eachLayer(function (layer) {
                        drawnItems.addLayer(layer); // Ensure drawnItems exists here
                    });
                }

                // Handle the creation of polygons
                Createmap.on(L.Draw.Event.CREATED, function (event) {
                    var layer = event.layer;
                    drawnItems.clearLayers(); // Clear any previously drawn shapes
                    drawnItems.addLayer(layer);

                    var latLngs = layer.getLatLngs()[0];

                    // Check if the first and last points are the same
                    if (latLngs[0] !== latLngs[latLngs.length - 1]) {
                        latLngs.push(latLngs[0]); // Add the first point at the end to close the polygon
                    }

                    // Convert polygon to WKT format
                    var coordinates = latLngs.map(function (point) {
                        return point.lng + " " + point.lat;
                    }).join(", ");
                    var wkt = `POLYGON((${coordinates}))`;
                    $('#hdnMapdata').val(wkt);
                });

                // Handle edit event
                Createmap.on(L.Draw.Event.EDITED, function (event) {
                    var layers = event.layers;
                    layers.eachLayer(function (layer) {

                        var editedGeoJson = layer.toGeoJSON();

                        // Convert edited GeoJSON to WKT
                        var latLngs = layer.getLatLngs()[0];

                        // Check if the first and last points are the same
                        if (latLngs[0] !== latLngs[latLngs.length - 1]) {
                            latLngs.push(latLngs[0]); // Add the first point at the end to close the polygon
                        }

                        var coordinates = latLngs.map(function (point) {
                            return point.lng + " " + point.lat;
                        }).join(", ");

                        var wkt = `POLYGON((${coordinates}))`;

                        $('#hdnMapdata').val(wkt);
                    });
                });

                $('#AddGeomertyDataModal').on('shown.bs.modal', function () {
                    Createmap.invalidateSize();
                });
            });
        }


        function ConvertGeoJSONtoWKT(geoJsonString) {

            // Parse the GeoJSON string to a JavaScript object
            var geoJson = JSON.parse(geoJsonString);

            // Extract the coordinates array
            var coordinates = geoJson.coordinates[0]; // Assuming single polygon

            // Map the coordinates to "lng lat" strings
            var wktCoordinates = coordinates.map(function (point) {
                return point[0] + " " + point[1]; // lng lat
            });

            // Ensure the polygon is closed by checking the first and last points
            if (wktCoordinates[0] !== wktCoordinates[wktCoordinates.length - 1]) {
                wktCoordinates.push(wktCoordinates[0]); // Close the polygon
            }

            // Join the coordinates with commas and format as WKT
            var wkt = `POLYGON((${wktCoordinates.join(", ")}))`;
            return wkt;
        }
        function ClearGeomertyDataModal() {
            $('#txtZone').val("");
            $('#hdnMapdata').val("");

            $("#h4GeomertyDataTitle").html("Add Geomerty Data");
            $("#hdnId").val("0");
            $('#txtType').val("");
        }
        function SaveGeomertyData() {
            // let valid = formValidation(["txtDeviceName", "txtHeader", "txtDuration"]);
            let valid = formValidation(["txtZone", "hdnMapdata"]);

            if (valid) {
                var dataObject = {};
                dataObject.Id = $("#hdnId").val();
                dataObject.Zone = $("#txtZone").val();
                dataObject.FeatureGeoJson = $('#hdnMapdata').val();
                dataObject.Type = $('#txtType').val();



                $.ajax({
                    url: CreateUpdateGeomertyDataUrl,
                    type: "POST",
                    data: dataObject,  // Send data if needed
                    beforeSend: function () {

                    },
                    success: function (response) {
                        if (response.data) {
                            toastr.success(response.errorMessage);
                            $('#AddGeomertyDataModal').modal('hide');
                            // initMap();
                            GetAllGeomertyData();
                            initMap();
                        }
                        else {
                            toastr.error(response.errorMessage);
                        }
                        // Handle success (e.g., update UI with response data)
                    },
                    error: function (error) {
                        console.log("Error:", error);
                        toastr.error("Error:" + error);
                    }
                }).done(function () {

                });
            }
            else {
                toastr.warning("Please fill in required field(s)");
            }

        }
    </script>

}