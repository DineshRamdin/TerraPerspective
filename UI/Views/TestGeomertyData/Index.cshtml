@{
    ViewData["Title"] = "Test Geomerty Data";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.css" />


<!-- Content Header (Page header) -->
<div class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h1 class="m-0">Test Geomerty Data</h1>
            </div><!-- /.col -->
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a asp-area="" asp-controller="Dashboard" asp-action="index">Home</a></li>
                    <li class="breadcrumb-item active">Test Geomerty Data</li>
                </ol>
            </div><!-- /.col -->
        </div><!-- /.row -->
    </div><!-- /.container-fluid -->
</div>
<!-- /.content-header -->


<section class="content">
    <div class="container-fluid">
        <div class="card card-solid">
            <div class="card-body pb-0">
                   <div class="row">
                    <div class="col-10">
                    </div>
                    <div class="col-2">
                        <button type="button" class="btn btn-block btn-primary mb-3" onclick="openGeomertyDataModal(0)">Add</button>
                    </div>
                </div>
                <div class="row">
                    <div class="col-12  mb-10">
                        <div id="map" style="height: 500px;"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<div class="modal fade" id="AddGeomertyDataModal" aria-hidden="true" data-backdrop="static" data-keyboard="false">
    <partial name="_AddGeomertyData.cshtml" />
</div>

@section scripts
{
        <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/leaflet.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet.draw/1.0.4/leaflet.draw.js"></script>

        <script>

            var GetAllTestGeomertyDataUrl = '@Url.Action("GetAll", "TestGeomertyData")';
            var CreateUpdateGeomertyDataUrl= '@Url.Action("CreateUpdate", "TestGeomertyData")';

            $(function () {
                $('.nav-link').removeClass('active');
                $('#liTestGeomertyDatamenu').addClass('active');


                initMap();
            });

            let map;

            function initMap() {
                var MapData = [];
                $.ajax({
                    url: GetAllTestGeomertyDataUrl,
                    type: "POST",
                    // data: dataObject,  // Send data if needed
                    beforeSend: function () {
                        MapData = [];
                    },
                    success: function (response) {
                        console.log("response.data", response.data);
                        if (response.data) {
                            MapData = response.data;
                        }
                    },
                    error: function (error) {
                        console.log("Error:", error);
                        toastr.error("Error:" + error);
                    }
                }).done(function () {

                 if(map)     
                 {
                    map.eachLayer(function (layer) {
                        if (!layer._url) {
                            map.removeLayer(layer); // Remove all layers except the tile layer
                        }
                    });
                 }
                 else
                 {

                     map = L.map('map').setView([51.505, -0.09], 13);

                    const tiles = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        maxZoom: 19,
                        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
                    }).addTo(map);
                 }
                    // Loop through the data array and process each feature
                    MapData.forEach(function (item) {
                        // Parse the GeoJSON string
                        var geoJsonData = JSON.parse(item.featureGeoJson);

                        // Add the GeoJSON polygon to the map
                        L.geoJSON(geoJsonData).addTo(map);
                    });
                });

            }

            let Createmap;
            function openGeomertyDataModal(id) {
                $('#txtZone').val("");
                $('#hdnMapdata').val("");
                
                $("#h4GeomertyDataTitle").html("Add Geomerty Data");
                $("#hdnId").val("0");


                $('#AddGeomertyDataModal').modal('show');
                $("#frnGeomertyDataCreate").validate({}).resetForm();

                 if(Createmap )     
                 {
                    Createmap.eachLayer(function (layer) {
                        if (!layer._url) {
                            Createmap.removeLayer(layer); // Remove all layers except the tile layer
                        }
                    });
                 }
                 else
                 {
                    Createmap = L.map('Createmap').setView([51.505, -0.09], 13);

                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        maxZoom: 19
                    }).addTo(Createmap);
                 }
                // Add drawing control
            var drawnItems = new L.FeatureGroup();
            Createmap.addLayer(drawnItems);

            var drawControl = new L.Control.Draw({
                edit: {
                    featureGroup: drawnItems,
                    remove: true
                },
                draw: {
                    polygon: true,
                    polyline: false,
                    rectangle: false,
                    circle: false,
                    marker: false,
                    circlemarker: false
                }
            });
            Createmap.addControl(drawControl);

            // Handle the creation of polygons
            Createmap.on(L.Draw.Event.CREATED, function (event) {
                var layer = event.layer;
                drawnItems.clearLayers(); // Clear any previously drawn shapes
                drawnItems.addLayer(layer);

                 var latLngs = layer.getLatLngs()[0];

                  // Check if the first and last points are the same
                if (latLngs[0] !== latLngs[latLngs.length - 1]) {
                    latLngs.push(latLngs[0]); // Add the first point at the end to close the polygon
                }

                // Convert polygon to WKT format
                var coordinates = latLngs.map(function (point) {
                    return point.lng + " " + point.lat;
                }).join(", ");
                var wkt = `POLYGON((${coordinates}))`;
                $('#hdnMapdata').val(wkt);
            });
          }

          function SaveGeomertyData() {
              // let valid = formValidation(["txtDeviceName", "txtHeader", "txtDuration"]);
                let valid = formValidation(["txtZone", "hdnMapdata"]);

                  if (valid) {
                    var dataObject = {};
                    dataObject.Id = $("#hdnId").val();
                    dataObject.Zone = $("#txtZone").val();
                    dataObject.FeatureGeoJson = $('#hdnMapdata').val();


                    $.ajax({
                        url: CreateUpdateGeomertyDataUrl,
                        type: "POST",
                        data: dataObject,  // Send data if needed
                        beforeSend: function () {

                        },
                        success: function (response) {
                            if (response.data) {
                                toastr.success(response.errorMessage);
                                $('#AddGeomertyDataModal').modal('hide');
                                initMap();
                            }
                            else {
                                toastr.error(response.errorMessage);
                            }
                            // Handle success (e.g., update UI with response data)
                        },
                        error: function (error) {
                            console.log("Error:", error);
                            toastr.error("Error:" + error);
                        }
                    }).done(function () {

                    });
                }
                else {
                    toastr.warning("Please fill in required field(s)");
                }

          }
        </script>

}